<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>05-数组 排序 查找</title>
    <link href="/2023/12/02/05-%E6%95%B0%E7%BB%84-%E6%8E%92%E5%BA%8F-%E6%9F%A5%E6%89%BE/"/>
    <url>/2023/12/02/05-%E6%95%B0%E7%BB%84-%E6%8E%92%E5%BA%8F-%E6%9F%A5%E6%89%BE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对应内容：P156 - P190</p></blockquote><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><em>概念</em><ul><li>数组可以存放多个同一类型的数据，数组也是一种数据类型，是引用类型。</li></ul></li><li><em><strong>使用方式</strong></em><ul><li><em>使用方式1  动态初始化</em><ul><li>定义数组<ul><li>语法:数据类型 数组名[] &#x3D; new 数据类型[大小]</li><li>int a[] &#x3D; new int[5];</li><li>(int [] a &#x3D; new int[5];)两者一样的</li></ul></li><li>引用数组<ul><li>数组名[下标&#x2F;索引] （下标从0开始）</li></ul></li></ul></li><li><em>使用方式2 动态初始化</em><ul><li>先声明数组<ul><li>语法:数据类型 数组名;</li><li>int a[];   int[] a;</li></ul></li><li>创造数组<ul><li>语法:数组名 &#x3D; new 数据类型[大小];</li><li>a  &#x3D; new int[10];</li></ul></li></ul></li><li><em>使用方式3 静态初始化</em><ul><li>初始化数组<ul><li>语法: 数据类型 数组名[] &#x3D; {元素值，元素值};</li></ul></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array01</span>&#123;</span><br><span class="line"><span class="comment">//编写一个main函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">double</span>[] hens = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3.4</span>, <span class="number">2</span>, <span class="number">50</span>&#125;;</span><br><span class="line"><span class="type">double</span> <span class="variable">totalWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">avgWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//遍历数组得到数组的所有元素的和，使用for</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; hens.length; i++ )&#123;</span><br><span class="line"><span class="comment">//System.out.println(&quot;第&quot;+ (i+1) + &quot;个元素的值 = &quot; + hens[i] );</span></span><br><span class="line">totalWeight +=hens[i];</span><br><span class="line">&#125;</span><br><span class="line">avgWeight = totalWeight/hens.length;</span><br><span class="line">System.out.println(<span class="string">&quot;总体重 = &quot;</span> + totalWeight +</span><br><span class="line"><span class="string">&quot;平均体重 = &quot;</span> + avgWeight);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><strong>数组注意事项</strong></em><ol><li>数组是多个同类型数据的组合，以实现对这些数据的统一管理<ul><li>e.g.：<code>int a[] = &#123;1,2,3,4,1&#125;;</code> error double-&gt;int</li><li>e.g.:<code>double b[] = &#123;1.1, 2,3&#125;;</code> true int-&gt;double</li></ul></li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型</li><li>数组创建后，如果没有赋值，有默认值<ol><li>int 0, short 0, byte 0, long 0</li><li>float 0.0, double 0.0, char \u0000</li><li>boolean false, String null</li></ol></li><li>使用数组的步骤：<ol><li>声明数组并开辟空间</li><li>给数组的每个元素赋值</li><li>使用数组</li></ol></li><li>数组的下标从0开始</li><li>下标必须在指定范围内使用，否则报：下标越界异常</li><li>数组属于引用类型，数组型数据是对象(object)</li></ol></li><li><h2 id="数组赋值机制-数组整体赋值在默认情况下是引用传递，赋的值是地址，赋值方式为引用传递"><a href="#数组赋值机制-数组整体赋值在默认情况下是引用传递，赋的值是地址，赋值方式为引用传递" class="headerlink" title="数组赋值机制  - 数组整体赋值在默认情况下是引用传递，赋的值是地址，赋值方式为引用传递"></a><em><strong>数组赋值机制</strong></em><br>  - 数组整体赋值在默认情况下是引用传递，赋的值是地址，赋值方式为<em>引用传递</em></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAssign</span>&#123;</span><br><span class="line"><span class="comment">//编写一个main函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="comment">//变量默认情况下是值传递</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> n1;</span><br><span class="line">n2 = <span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n1 = &quot;</span> + n1);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="string">&quot;n2 = &quot;</span> + n2);<span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组整体赋值在默认情况下是引用传递</span></span><br><span class="line"><span class="comment">//赋的值是地址，赋值方式为引用传递</span></span><br><span class="line"><span class="type">int</span>[] arr1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] arr2 = arr1;</span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//arr1的值</span></span><br><span class="line">System.out.println(<span class="string">&quot;===arr1的值===&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++)&#123;</span><br><span class="line">System.out.println(arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//n1 = 0</span></span><br><span class="line"><span class="comment">//n2 = 100</span></span><br><span class="line"><span class="comment">//===arr1的值===</span></span><br><span class="line"><span class="comment">//10</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure></li><li><em>数组拷贝</em><ul><li><code>int[] arr1 =&#123;1,2,3&#125;;</code></li><li><code>int[] arr2 = new int[arr1.length];</code></li><li><code>for(int i = 0; i &lt; arr1.length; i++)</code><ul><li><code>&#123; arr2[i] = arr1[i];&#125;</code></li></ul></li></ul></li><li><em>数组反转</em><ul><li>前后依次翻转</li><li>逆序赋值（创建新数组）</li></ul></li><li><h2 id="数组扩容-int-arr-1-2-3-int-arrNew-new-int-arr-length-1-for-arrNew-arrNew-length-1-4-arr-arrNew-java中原数组似乎不用自己释放，Java有垃圾回收机制"><a href="#数组扩容-int-arr-1-2-3-int-arrNew-new-int-arr-length-1-for-arrNew-arrNew-length-1-4-arr-arrNew-java中原数组似乎不用自己释放，Java有垃圾回收机制" class="headerlink" title="数组扩容  -  int[] arr = {1,2,3};  - int[] arrNew = new int[arr.length+1];  - for(){...}  - arrNew[arrNew.length-1] = 4;  - arr = arrNew;   - //java中原数组似乎不用自己释放，Java有垃圾回收机制"></a><em>数组扩容</em><br>  -  <code>int[] arr = &#123;1,2,3&#125;;</code><br>  - <code>int[] arrNew = new int[arr.length+1];</code><br>  - <code>for()&#123;...&#125;</code><br>  - <code>arrNew[arrNew.length-1] = 4;</code><br>  - <code>arr = arrNew; </code><br>  - <code>//java中原数组似乎不用自己释放，Java有垃圾回收机制</code></h2></li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul><li><em>分类</em><ul><li>内部排序<ul><li>将所有需要处理的数据都加载到内存存储器中进行排序</li><li>冒泡，插入，选择</li></ul></li><li>外部排序<ul><li>数据量过大，无法全部加载到内存中，需要借助外部存储进行排序</li><li>合并排序，直接合并排序法</li></ul></li></ul></li><li>冒泡排序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span>&#123;</span><br><span class="line"><span class="comment">//编写一个main函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">int</span>[] arr =&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - i -<span class="number">1</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">tmp = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;\n===第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;轮===&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; arr.length; k++)&#123;</span><br><span class="line">System.out.print(arr[k]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li><em>常用的查找</em><ul><li>顺序查找</li><li>二分查找</li></ul></li></ul><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ul><li><code>int[][] arr = &#123;&#123;1,1,1&#125;&#123;1,1,1&#125;&#123;1,1,1&#125;&#125;;</code></li><li><em><strong>使用方式</strong></em><ul><li><em>使用方式1  动态初始化</em><ul><li>定义数组<ul><li>语法:数据类型 数组名[] &#x3D; new 数据类型[大小]</li><li>int a[][]  &#x3D; new int[5][6] ;</li><li>(int [] [] a &#x3D; new int[5][6] ;)两者一样的</li></ul></li><li>引用数组<ul><li>数组名[下标&#x2F;索引] （下标从0开始）</li></ul></li></ul></li><li><em>使用方式2 动态初始化</em><ul><li>先声明数组<ul><li>语法:数据类型 数组名;</li><li>int a[][] ;   int[] [] a;</li></ul></li><li>创造数组<ul><li>语法:数组名 &#x3D; new 数据类型[大小][大小] ;</li><li>a  &#x3D; new int[10];</li></ul></li></ul></li><li><em>使用方式3 动态初始化—-列数不确定</em><ul><li><strong>这部分不太记得了</strong></li><li><img src="/img/java_basic/Pasted_image_20231201221543.png" alt="Pasted_image_20231201221543.png"></li></ul></li><li><em>使用方式3 静态初始化</em><ul><li>初始化数组<ul><li>语法: 数据类型 数组名\[\]\[\] = \{\{\},\{\}\};</li></ul></li></ul></li></ul></li><li><em><strong>使用细节</strong></em><ol><li>二维数组的声明方式：<ul><li>int[][]y; int []y[]; int y[][];</li></ul></li><li><em>二维数组实际上是由多个一维数组组成的，各个一维数组的长度可以相同，也可以不同</em><ol><li>int map\[\]\[\] = \{\{1,2\},\{3,4,5\}\};</li></ol></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>从零开始学java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>lesson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04-程序控制结构</title>
    <link href="/2023/12/02/04-%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2023/12/02/04-%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对应内容：P104-P154<br>流程控制语句：<br>顺序控制<br>分支控制<br>循环控制</p></blockquote><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><ul><li><em>定义</em>：程序从上到下逐行执行，中间没有任何判断和跳转</li></ul><h2 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h2><ul><li><p><em>分类</em>：</p><ul><li>单分支</li><li>双分支</li><li>多分支<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本语法：</span><br><span class="hljs-keyword">if</span>(条件表达式)&#123;<br>代码块<span class="hljs-number">1</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>&#123;<br>代码块<span class="hljs-number">2</span><br>&#125;<br>……<br><span class="hljs-keyword">else</span>&#123;<br>代码块n<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><img src="/img/java_basic/Pasted_image_20231129161059.png" alt="img"></p></li><li><p><img src="/./img/java_basic/Pasted_image_20231129161224.png" alt="Pasted_image_20231129161224.png"></p></li><li><p><img src="/img/java_basic/Pasted_image_20231129161224.png" alt="Pasted_image_20231129161349.png"></p></li><li><p><em>嵌套分支</em></p><ul><li>最好不要超过三层 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本语法：</span><br><span class="hljs-keyword">if</span>()&#123;<br><span class="hljs-keyword">if</span>()&#123;<br><span class="hljs-comment">//if else</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//if else</span><br>&#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p><em>switch</em></p><ul><li><img src="/img/java_basic/Pasted_image_20231201161949.png" alt="Pasted_image_20231201161949.png"></li><li>细节：<ul><li>表达式数据类型应该与case后面的常量类型一直，或者可以自动转成可以相互比较的类型。比如输入的是字符char，而常量是int<ul><li>e.g.:<code>char c = &#39;a&#39;; switch(c)&#123;case 20:...&#125;</code></li></ul></li><li>switch(表达式)的返回值必须是byte short int char enum String中的一种</li><li>case子句中的值必须是常量，不能是变量</li><li>default子句中的语句块是可选的，当没有对应的case时执行default</li><li>break用于执行一个case分支结束后跳出switch语句块，如果没有break，程序会顺序执行到switch语句块结尾。</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br><span class="hljs-keyword">case</span> 常量<span class="hljs-number">1</span>:语句块<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> 常量<span class="hljs-number">2</span>:语句块<span class="hljs-number">2</span>;<span class="hljs-keyword">break</span>;<br>...<br><span class="hljs-keyword">case</span> 常量n:语句块n;<span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>: <span class="hljs-keyword">default</span>语句块;<br>&#125;<br><span class="hljs-comment">//如果没有break；会继续向下走，运行下面的，直到yudaobreak或者程序块末尾</span><br><br><span class="hljs-comment">//case的穿透：</span><br><br><span class="hljs-keyword">switch</span>(month)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;月份错误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><h2 id="switch和if的比较-如果判断的具体数值不多，而且符合byte-short-int-char-enum-String的类型，两种都可以用，但是建议使用switch-其他情况：对于区间判断或boolean等，建议使用if-if-else"><a href="#switch和if的比较-如果判断的具体数值不多，而且符合byte-short-int-char-enum-String的类型，两种都可以用，但是建议使用switch-其他情况：对于区间判断或boolean等，建议使用if-if-else" class="headerlink" title="switch和if的比较  - 如果判断的具体数值不多，而且符合byte short int char enum String的类型，两种都可以用，但是建议使用switch  - 其他情况：对于区间判断或boolean等，建议使用if if-else"></a><em><strong>switch和if的比较</strong></em><br>  - 如果判断的具体数值不多，而且符合byte short int char enum String的类型，两种都可以用，但是建议使用<code>switch</code><br>  - 其他情况：对于区间判断或boolean等，建议使用if if-else</h2></li></ul><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><ul><li><em><strong>for</strong></em><ul><li><img src="/img/java_basic/Pasted_image_20231201164111.png" alt="Pasted_image_20231201164111.png"></li><li><h2 id="注意点-循环条件返回一个boolean类型的白哦大师-for-循环条件-中循环变量初始化和循环变量迭代可以写到其他地方，但是两边的分号不能省略-循环变量初始化可以有多条初始语句，但是要求类型一样，并且中间用逗号隔开，变量迭代也可以有多条语句，中间用逗号隔开"><a href="#注意点-循环条件返回一个boolean类型的白哦大师-for-循环条件-中循环变量初始化和循环变量迭代可以写到其他地方，但是两边的分号不能省略-循环变量初始化可以有多条初始语句，但是要求类型一样，并且中间用逗号隔开，变量迭代也可以有多条语句，中间用逗号隔开" class="headerlink" title="注意点  - 循环条件返回一个boolean类型的白哦大师  - for(;循环条件;)中循环变量初始化和循环变量迭代可以写到其他地方，但是两边的分号不能省略  - 循环变量初始化可以有多条初始语句，但是要求类型一样，并且中间用逗号隔开，变量迭代也可以有多条语句，中间用逗号隔开"></a><em>注意点</em><br>  - 循环条件返回一个boolean类型的白哦大师<br>  - for(;循环条件;)中循环变量初始化和循环变量迭代可以写到其他地方，但是两边的分号不能省略<br>  - 循环变量初始化可以有多条初始语句，但是要求类型一样，并且中间用逗号隔开，变量迭代也可以有多条语句，中间用逗号隔开</h2></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//同C C++</span><br><span class="hljs-keyword">for</span>(循环变量初始化；循环条件；循环变量迭代)&#123;<br>循环操作(可以多条语句);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><em><strong>while</strong></em><ul><li><img src="/img/java_basic/Pasted_image_20231201165116.png" alt="Pasted_image_20231201165116.png"></li><li><em>细节</em><ul><li>循环条件返回一个boolean类型</li><li><em>先判断再执行语句</em></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(循环条件)&#123;<br>循环体(语句);<br>循环变量迭代;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><em><strong>do..while</strong></em></p><ul><li><code>do while</code>是关键字</li><li>也有执行四要素，只是位置不一样</li><li><em>先执行再判断</em></li><li>最后有一个 <code>;</code></li><li><img src="/img/java_basic/Pasted_image_20231201165420.png" alt="Pasted_image_20231201165420.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>循环体(语句);<br>循环变量迭代;<br>&#125;<span class="hljs-keyword">while</span>(循环条件);<br></code></pre></td></tr></table></figure></li></ul></li><li><h2 id="多重循环控制-将一个循环放在另一个循环体中-（一般使用两层，最多不要超过三层，否则代码可读性会很差）"><a href="#多重循环控制-将一个循环放在另一个循环体中-（一般使用两层，最多不要超过三层，否则代码可读性会很差）" class="headerlink" title="多重循环控制  - 将一个循环放在另一个循环体中  - （一般使用两层，最多不要超过三层，否则代码可读性会很差）"></a><em><strong>多重循环控制</strong></em><br>  - 将一个循环放在另一个循环体中<br>  - （一般使用两层，最多不要超过三层，否则代码可读性会很差）</h2></li><li><p><em><strong>break</strong></em></p><ul><li>当某个条件满足时，终止语句块的执行</li><li>一般使用在switch或者循环(for while do_while)中</li><li>细节<ul><li>break语句出现在多层嵌套的语句块中，可以用<em>标签</em>指明要终止的是哪一层语句块。</li><li>标签的名字由程序员指定</li><li>指定到哪个标签就退出到哪里</li><li>在实际开发中，尽量不要用标签</li><li>如果没有指定break，默认推出最近的循环体</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">label1:<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>label2:<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">20</span>; j++)&#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//等价于break label2;</span><br><span class="hljs-comment">//break label1; //结束外层循环</span><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><em><strong>continue</strong></em><ul><li>用于结束本次循环，继续执行下一次循环</li><li>出现在多层嵌套的循环语句时，可以通过label确定跳过的是哪一层循环</li></ul></li><li><em><strong>return</strong></em><ul><li>表示跳出所在的方法</li><li>如果写在main方法，表示退出程序。</li></ul></li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ul><li><img src="/img/java_basic/Pasted_image_20231201193452.png" alt="Pasted_image_20231201193452.png"></li><li><img src="/img/java_basic/Pasted_image_20231201193517.png" alt="Pasted_image_20231201193517.png"></li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>从零开始学java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>lesson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03-运算符</title>
    <link href="/2023/12/02/03-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/12/02/03-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对应内容：P62-P103<br>问题：</p><ol><li>干看有点没意思，找点练手的内容</li><li>前段较为基础，至P190分别为运算符，分支，数组，可以快速过一下，争取两天过完（有C基础的可以快速过），然后看Java的对象，方法，重载继承，争取3天过完（有C++等面向对象语言基础的可以快速过）</li></ol></blockquote><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><table><thead><tr><th>运算符</th><th>运算</th></tr></thead><tbody><tr><td>+</td><td>正号</td></tr><tr><td>-</td><td>负号</td></tr><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>\</td><td>除</td></tr><tr><td>%</td><td>取模</td></tr><tr><td>++ <br/> ++</td><td>自增（前）:先运算后取值<br/>自增（后）：先取值后运算</td></tr><tr><td>–<br/>–</td><td>自减（前）:先运算后取值<br/>自减（后）：先取值后运算</td></tr><tr><td>+</td><td>字符串相加</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*算数运算符的使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperator</span>&#123;</span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//从数学来说是2.5，但Java会输出2，因为10和4都是int</span></span><br><span class="line">System.out.println(<span class="number">10</span>/<span class="number">4</span>);</span><br><span class="line"><span class="comment">//输出2.5，因为有高精度的数</span></span><br><span class="line">System.out.println(<span class="number">10.0</span>/<span class="number">4</span>);</span><br><span class="line"><span class="comment">//输出2.0，因为Java中10 / 4 = 2， 2 ---&gt;2.0，精度提升</span></span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">10</span>/<span class="number">4</span>;</span><br><span class="line">System.out.println(d);</span><br><span class="line"></span><br><span class="line"><span class="comment">//%取模</span></span><br><span class="line"><span class="comment">//%的本质： a % b = a - a / b * b</span></span><br><span class="line"><span class="comment">//若a为小数，a % b = a - （int）a / b * b</span></span><br><span class="line"><span class="comment">//e.g.</span></span><br><span class="line"><span class="comment">// 10 % 3 = 10 - 10 / 3 * 3 = 1</span></span><br><span class="line"><span class="comment">// 10 % (-3) = 10 - 10 / (-3) * (-3) = 1</span></span><br><span class="line"><span class="comment">//-10 % 3 = -10 - (-10) / 3 * 3 = -1</span></span><br><span class="line"><span class="comment">//-10 % (-3) = -10 - (-10) / (-3) * (-3) = -1</span></span><br><span class="line"><span class="comment">//省流：直接用两个正数取余，最后是正是负取决于被取余的数</span></span><br><span class="line">System.out.println(<span class="number">10</span> % <span class="number">3</span>);<span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">10</span> % <span class="number">3</span>);<span class="comment">//-1</span></span><br><span class="line">System.out.println(<span class="number">10</span> % -<span class="number">3</span>);<span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">10</span> % -<span class="number">3</span>);<span class="comment">//- 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//++的使用</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">i++;<span class="comment">//自增，等价于i = i + 1;</span></span><br><span class="line">++i;<span class="comment">//自增，等价于i = i + 1;</span></span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">作为表达式使用</span></span><br><span class="line"><span class="comment">前++：++i先自增后赋值</span></span><br><span class="line"><span class="comment">后++：i++先赋值后自增</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line">k = j++;</span><br><span class="line">System.out.println(<span class="string">&quot;k = &quot;</span> + k + <span class="string">&quot; j =&quot;</span> + j);</span><br><span class="line">k = ++j;</span><br><span class="line">System.out.println(<span class="string">&quot;k = &quot;</span> + k + <span class="string">&quot; j =&quot;</span> + j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><strong>例题</strong></em><ul><li><code>int i = 1;  i = i++; System.out.println(i);</code><ul><li>i &#x3D; 1;</li><li>步骤：使用了临时变量</li><li>(1) temp &#x3D; i (2) i &#x3D; i + 1 (3) i &#x3D; temp</li></ul></li><li><code>int i = 1;  i = ++i; System.out.println(i);</code><ul><li>i &#x3D; 2;</li><li>(1) i &#x3D; i+1 (2) temp &#x3D; i (3) i &#x3D; temp</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 算数运算符练习</span></span><br><span class="line"><span class="comment">* 输入日期，输出是几周零几天</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperatorExercise</span>&#123;</span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">if</span>(scan.hasNextInt())&#123;</span><br><span class="line">day = scan.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sum / <span class="number">7</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">leftDay</span> <span class="operator">=</span> sum % <span class="number">7</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;合计&quot;</span>+week+<span class="string">&quot;周&quot;</span>+leftDay+<span class="string">&quot;天&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 算数运算符练习</span></span><br><span class="line"><span class="comment">* 输入华氏度，返回摄氏度，摄氏度 = 5/9*(华氏度-100)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticOperatorExercise</span>&#123;</span><br><span class="line"><span class="comment">//编写一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">huashi</span> <span class="operator">=</span> <span class="number">233.4</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">sheshi1</span> <span class="operator">=</span> <span class="number">5</span> / <span class="number">9</span>  * (huashi - <span class="number">100</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">sheshi2</span> <span class="operator">=</span> <span class="number">5.0</span> / <span class="number">9</span> * (huashi - <span class="number">100</span>);</span><br><span class="line">System.out.println(sheshi1+<span class="string">&quot; &quot;</span>+sheshi2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0.0 74.11111111111111</span></span><br><span class="line"><span class="comment">//原因：5/9是int型计算，之后会转化为int型，0*（  ）</span></span><br><span class="line"><span class="comment">//使用数学公式时要考虑Java的特性</span></span><br></pre></td></tr></table></figure><h2 id="关系运算符（比较运算符）"><a href="#关系运算符（比较运算符）" class="headerlink" title="关系运算符（比较运算符）"></a>关系运算符（比较运算符）</h2><blockquote><p>结果只有boolean的true和false</p></blockquote><table><thead><tr><th>运算符</th><th>运算</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>相等于</td></tr><tr><td>！&#x3D;</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>instanceof</td><td>检查是否为类的对象</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><blockquote><p>用于连接多个条件，最后的结果也是一个boolean型结果</p></blockquote><table><thead><tr><th>a</th><th>b</th><th>a &amp;&amp; b</th><th>a || b</th><th>!a</th><th>!b</th><th>a &amp; b</th><th>a | b</th><th>a ^ b</th></tr></thead><tbody><tr><td>true</td><td>true</td><td>true</td><td>true</td><td>false</td><td>false</td><td>true</td><td>true</td><td>false</td></tr><tr><td>true</td><td>false</td><td>false</td><td>true</td><td>false</td><td>true</td><td>false</td><td>true</td><td>true</td></tr><tr><td>false</td><td>true</td><td>false</td><td>true</td><td>true</td><td>false</td><td>false</td><td>true</td><td>true</td></tr><tr><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td><td>true</td><td>false</td><td>false</td><td>false</td></tr></tbody></table><ul><li>&amp;和&amp;&amp;的使用：<ul><li>短路与&amp;&amp;：若第一个条件为false，则不会判断第二个条件</li><li>逻辑与&amp;：不管第一个条件是不是false,第二个条件都会继续判断</li><li>正常用&amp;&amp;，效率比较高</li></ul></li><li>||和|的基本规则<ul><li>短路或||：若第一个条件为true，则不会判断第二个条件</li><li>逻辑或|：不管第一个条件是不是true,第二个条件都会继续判断</li><li>正常用||，效率比较高</li></ul></li><li>!以及^的基本规则<ul><li>！：真变假，假变真</li><li>^：同假异真</li></ul></li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><ul><li>基本赋值运算符： &#x3D; </li><li>复合赋值运算符：+&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;</li><li>特点：<ul><li>赋值运算符的运算顺序从右向左</li><li>左边只能是变量，右边可以是常量，也可以是变量，表达式，常量值</li><li>复合赋值运算符会进行类型的转换<ul><li>e.g.: <code>byte b = 3; b += 3;</code>等价于<code>b = (byte)(b + 3)</code></li><li><code>b++;</code>等价于<code>b = (byte)(b+1)</code></li></ul></li></ul></li></ul><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><ul><li>语法：<ul><li>条件表达式1 ？表达式1 ：表达式2</li></ul></li></ul><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><ul><li><img src="/img/java_basic/Pasted_image_20231128111221.png" alt="Pasted image 20231128111221.png"></li></ul><h2 id="标识符命名规则和规范"><a href="#标识符命名规则和规范" class="headerlink" title="标识符命名规则和规范"></a>标识符命名规则和规范</h2><ul><li><em><strong>命名规则</strong></em><ul><li>字母大小写，0-9，_或$组成</li><li>不能以数字开头</li><li>不可以使用关键字和保留字，但可以包含关键字和保留字</li><li>Java区分大小写，命名长度无限制</li><li>标识符不能包含空格</li></ul></li><li><em><strong>命名规范</strong></em><ul><li>包名：多单词组成时所有字母都小写</li><li>类名、接口名：多单词组成时所有单词的首字母大写（大驼峰）</li><li>变量名、方法名：多单词组成时，第一个单词小写，第二个单词开始首字母大写（小驼峰）</li><li>常量名：所有字母都大写</li></ul></li></ul><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><ul><li><img src="/img/java_basic/Pasted_image_20231128112550.png" alt="Pasted image 20231128112550.png"></li><li><img src="/img/java_basic/Pasted_image_20231128112650.png" alt="Pasted image 20231128112650.png"></li><li><em><strong>保留字</strong></em><ul><li><img src="/img/java_basic/Pasted_image_20231128112650.png" alt="Pasted image 20231128112720.png"></li></ul></li></ul><h2 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h2><ul><li>需要一个扫描器对象<em>scanner</em></li><li>步骤：<ul><li>导入该类的所在包，java.util.*</li><li>创建该类的对象</li><li>调用里面的功能<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//表示把java.util下面的Scanner类导入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Input</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line"><span class="comment">//演示接收用户输入</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入姓名&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.next();<span class="comment">//接收用户输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入年龄&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> scanner.nextInt();<span class="comment">//接收用户输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;请输入成绩&quot;</span>);</span><br><span class="line"><span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> scanner.nextDouble();<span class="comment">//接收用户输入</span></span><br><span class="line">System.out.println(<span class="string">&quot;名字=&quot;</span>+name+<span class="string">&quot; 年龄=&quot;</span>+age+<span class="string">&quot; 成绩=&quot;</span>+score);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><ul><li><p>二进制：0b或0B开头</p></li><li><p>十进制</p></li><li><p>八进制：0开头</p></li><li><p>十六进制：0x或0X开头</p></li><li><p>进制转换:略</p></li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><ul><li><em><strong>原码，反码，补码</strong></em><ul><li><img src="/img/java_basic/Pasted_image_20231128115159.png" alt="Pasted_image_20231128115159.png"></li></ul></li><li><em><strong>运算符（7个）：</strong></em><ul><li>按位与&amp;</li><li>按位或|</li><li>按位异或^</li><li>按位取反~</li><li>位移：&gt;&gt;  &lt;&lt; &gt;&gt;&gt;</li></ul></li><li><em><strong>例题</strong></em><ul><li><em>2&amp;3</em><ul><li>2的补码：00000000 00000000 00000000 00000010</li><li>3的补码：00000000 00000000 00000000 00000011</li><li>2&amp;3 &#x3D; 2</li></ul></li><li><em>~-2</em><ul><li>-2的原码：1000000 00000000 00000000 00000010</li><li>-2的补码：11111111 11111111 11111111 11111110</li><li>~-2：00000000 00000000 00000000 00000001</li><li>~-2 &#x3D; 1</li></ul></li><li><em>~2</em><ul><li>2的补码：00000000 00000000 00000000 00000010</li><li>~2：11111111 11111111 11111111 11111101</li><li>~2 &#x3D; -3</li></ul></li></ul></li><li><em><strong>&gt;&gt;, &lt;&lt;, &gt;&gt;&gt;</strong></em><ul><li>算数右移：&gt;&gt; n 除$2^n$</li><li>算数左移：&lt;&lt; n 乘$2^n$</li><li>逻辑右移：&gt;&gt;&gt; 低位溢出，高位补0</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>从零开始学java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>lesson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02-变量</title>
    <link href="/2023/12/02/02-%E5%8F%98%E9%87%8F/"/>
    <url>/2023/12/02/02-%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>变量：程序的基本组成单位<br>基本要素：<em>类型+名称+值</em><br>（变量名用于指向变量的存储位置）<br>学习目标：比较基础，快速过一下，11.16争取过完<br>对应内容：P35-P61</p></blockquote><ul><li>使用方式：声明+赋值</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>不同类型的变量占用的字节数不相同：int 4字节，double 8字节</li><li>变量必须先声明，后使用</li><li>该区域的数据（值）可以在该类型的范围内不断地变化e.g.: int a &#x3D; 1; a &#x3D;”hello”不能成功赋值</li><li>变量在同一个作用域内不能重名（一般是一个{}内）</li></ul><h2 id="程序中-号的使用（拼接）"><a href="#程序中-号的使用（拼接）" class="headerlink" title="程序中+号的使用（拼接）"></a>程序中+号的使用（拼接）</h2><ul><li>左右两边都是数值型时：做加法运算</li><li>左右两边有一方为字符串时：做拼接运算<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">add</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="number">123</span>+<span class="number">456</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;123&quot;</span>+<span class="number">456</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;123&quot;</span>+<span class="number">456</span>+<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;hello&quot;</span>+<span class="number">100</span>+<span class="number">3</span>);<span class="comment">//&quot;&quot;是字符串</span></span><br><span class="line">System.out.println(<span class="string">&#x27;1&#x27;</span>+<span class="number">4</span>);<span class="comment">//&#x27;&#x27;是字符，重点！！！</span></span><br><span class="line">System.out.println(<span class="string">&#x27;男&#x27;</span>+<span class="string">&#x27;女&#x27;</span>);<span class="comment">//得到的是一个整数，而不是男女</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//579</span></span><br><span class="line"><span class="comment">//123456</span></span><br><span class="line"><span class="comment">//123456hello</span></span><br><span class="line"><span class="comment">//hello1003</span></span><br><span class="line"><span class="comment">//53     ------&gt;此处为字符+数字，1是unicode的第49个（0031H），故输出53（0035H）</span></span><br><span class="line"><span class="comment">//52906</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>![[Pasted image 20231116161042.png]]</li><li>注：String不是基本数据类型</li></ul><h2 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h2><ul><li><em><strong>整数类型</strong></em><ul><li>使用细节：</li></ul></li></ul><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte(字节)</td><td>1字节</td><td>-128-127</td></tr><tr><td>short(短整型)</td><td>2字节</td><td>-$2^{15}$<del>$2^{15}-1$ (-32768</del>32767)</td></tr><tr><td>int(整型)</td><td>4字节</td><td>-$2^{31}$~$2^{31}-1$  (-2147483648-2147483647)</td></tr><tr><td>long(长整型)</td><td>8字节</td><td>-$2^{63}$~$2^{63}-1$</td></tr></tbody></table><ul><li><em><strong>整型的细节</strong></em><ul><li>Java的整型类型有固定的范围和长度，不受OS影响</li><li>Java整型常量默认为int型，声明long型须在后面加‘l’或’L‘</li><li>常量声明一般为int，除非数据过大才使用long</li><li>1 byte &#x3D; 8 bit   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntDetail</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">2</span>;<span class="comment">//right</span></span><br><span class="line"><span class="comment">//int n2 = 3L;//wrong</span></span><br><span class="line"><span class="type">long</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1L</span>;<span class="comment">//right</span></span><br><span class="line"><span class="type">long</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//right</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><em><strong>浮点类型</strong></em><ul><li>浮点型的分类：</li></ul></li></ul><table><thead><tr><th>类型</th><th>占用存储空间</th><th>范围</th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38~3.403E3</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308~1.798E30</td></tr></tbody></table><ul><li>浮点类型使用细节：<ul><li>java的浮点类型有固定的范围和长度，不受OS影响</li><li>浮点型常量默认double，声明float需要加F或f</li><li>浮点型常量的两种表现形式<ul><li>十进制形式： 5.12 512.0f, .512(必须有小数点)</li><li>科学计数法：5.12e2  5.12e-2</li></ul></li><li>通常使用double型，比float更精确</li><li>浮点数使用陷阱：2.7和8.1&#x2F;3<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleDetail</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//float n1 = 2.1;//wrong</span></span><br><span class="line"><span class="type">float</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">3.1F</span>;<span class="comment">//right</span></span><br><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1.1</span>;<span class="comment">//right</span></span><br><span class="line"><span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">1.1F</span>;<span class="comment">//right</span></span><br><span class="line"><span class="comment">//浮点数使用陷阱！！！</span></span><br><span class="line"><span class="type">double</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2.7</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">8.1</span>/<span class="number">3</span>;</span><br><span class="line">System.out.println(num1);<span class="comment">//2.7</span></span><br><span class="line">System.out.println(num2);<span class="comment">//2.6999999999999997</span></span><br><span class="line"><span class="comment">//当对运算结果是小数的内容需要进行相等判断时，需要小心使用</span></span><br><span class="line"><span class="keyword">if</span>(num1 == num2)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;错误比较：相等&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;错误比较：不相等&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确写法:用一个差值判断</span></span><br><span class="line"><span class="keyword">if</span>(Math.abs(num1-num2)&lt;<span class="number">0.000001</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;正确比较：相等，差值很小&quot;</span>);</span><br><span class="line">System.out.println(Math.abs(num1-num2));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;正确比较：不相等&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.7</span></span><br><span class="line"><span class="comment">//2.6999999999999997</span></span><br><span class="line"><span class="comment">//错误比较：不相等</span></span><br><span class="line"><span class="comment">//正确比较：相等，差值很小</span></span><br><span class="line"><span class="comment">//4.440892098500626E-16</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Java-API-文档"><a href="#Java-API-文档" class="headerlink" title="Java API 文档"></a>Java API 文档</h2><ul><li><a href="https://www.matools.com/">中文在线文档</a>(包含各种文档以及常见工具)</li><li>Java类的组织形式<ul><li><img src="/img/java_basic/Pasted_image_20231122100259.png" alt="Pasted_image_20231122100259"></li><li>使用方法：<ul><li>包—–&gt;类—–&gt;方法</li><li>直接检索</li></ul></li></ul></li></ul><h2 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h2><blockquote><p>表示单个字符，字符类型是char,两个字节（可以存放汉字），若要存放多个字节可以使用字符串String</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//char的基本使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">charDetail</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;你&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="number">97</span>;<span class="comment">//字符类型可以直接存放一个数字，会输出对应的字符</span></span><br><span class="line">System.out.println(c1);</span><br><span class="line">System.out.println(c2);</span><br><span class="line">System.out.println(c3);</span><br><span class="line">System.out.println(c4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="comment">//a</span></span><br></pre></td></tr></table></figure><ul><li><em><strong>使用细节</strong></em><ul><li>字符常量使用单引号 ‘ ‘ 引用，用” “是字符串形式</li><li>允许使用转义字符 ‘ \ ‘ 来转义</li><li>使用unicode进行编码</li><li>字符型是可以运算的，可以加减获得结果（ASCII码）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">charDetail</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="number">97</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="string">&#x27;十&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="number">21313</span>;</span><br><span class="line">System.out.println((<span class="type">int</span>)c1);</span><br><span class="line">System.out.println(c2);</span><br><span class="line">System.out.println((<span class="type">int</span>)c3);</span><br><span class="line">System.out.println(c4);</span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span>+<span class="number">10</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">System.out.println(c5);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//97</span></span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"><span class="comment">//21313</span></span><br><span class="line"><span class="comment">//十</span></span><br><span class="line"><span class="comment">//107</span></span><br><span class="line"><span class="comment">//b</span></span><br></pre></td></tr></table></figure></li></ul></li><li><em><strong>字符类型的本质</strong></em><ul><li>字符型数据存储到计算机中，会将字符对应的码值(整数找出来，比如’a’—-&gt;97 110 0001)</li><li>字符编码表是固定的<ul><li>ASCII ：用一个字节表示，一共128个，但实际上一个字节可以表示256个，第一位统一为0</li><li>Unicode：使用两个字节表示字符，字母和汉字统一使用两个字节，浪费空间</li><li>utf-8：大小可变的编码，字母使用1个字节，汉字使用3个字节。</li><li>GBK：可以表示汉字，且范围广，字母1个字节，汉字2个字节</li><li>GB2312：可以表示汉字，但是表示范围小于GBK</li><li>big5 码：可以表示繁体中文</li></ul></li></ul></li></ul><h2 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型 boolean"></a>布尔类型 boolean</h2><ul><li>只有两种值：true和false，没有null值</li><li>占一个字节</li><li><em>Java中不可以用0或非0的整数替代true和false</em></li></ul><h2 id="基本数据类型的转换"><a href="#基本数据类型的转换" class="headerlink" title="基本数据类型的转换"></a>基本数据类型的转换</h2><ul><li><em><strong>自动类型转换</strong></em><ul><li>Java程序在进行赋值或运算时，精度小的类型会自动转换为精度大的类型</li><li>char —-&gt;int—-&gt;long—-&gt;float—-&gt;double</li><li>byte —-&gt;short—-&gt;int—-&gt;long—-&gt;float—-&gt;double</li><li><img src="/img/java_basic/Pasted_image_20231126104917.png"></li><li>有多种类型的数据混合运算时，系统会自动把所有数据的类型转换为容量最大的类型，然后进行运算</li><li>把精度大的数据类型赋给精度小的会报错、反之会自动类型转换</li><li>（byte,short）和char之间不会相互自动转化</li><li>byte，short，char 三者都是可以计算的，计算时首先转换为int类型<ul><li><em>注意：前面的<code>char ch = &#39;a&#39; + 1;</code>和这里的并不相同，在Java中，对于常量表达式的计算会在编译时进行，而不是在运行时。对于 <code>char c1 = &#39;a&#39; + 1;</code> 这样的表达式，编译器会将字符 ‘a’ 转换为其对应的Unicode码值，然后执行加法操作，最终的结果是一个整数。由于这是一个常量表达式，而且结果在 <code>char</code> 类型的范围内，所以编译器允许这样的赋值</em></li></ul></li><li>boolean 不参与类型的自动转换</li><li>自动提升原则，表达式结果的类型自动提升为 操作数中最大的类型</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自动转化类型的细节</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConvertDetail</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//float n2 = n1 + 1.1;//错误，n1+1.1是double类型</span></span><br><span class="line"><span class="comment">// double n3 = n1 + 1.1;//正确</span></span><br><span class="line"><span class="type">float</span> <span class="variable">n4</span> <span class="operator">=</span> n1 + <span class="number">1.1f</span>;<span class="comment">//正确</span></span><br><span class="line"><span class="comment">//把精度大的数据类型赋给精度小的会报错、</span></span><br><span class="line"><span class="comment">//反之会自动类型转换</span></span><br><span class="line"><span class="comment">//（byte,short）和char之间不会相互自动转化</span></span><br><span class="line"><span class="comment">//把数据赋值给byte的时候，会先判断是否在byte范围内</span></span><br><span class="line"><span class="comment">//如果在，就可以</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//在-128~127内</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n5</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">// byte b2 = n2;//错误，如果是h变量赋值，会判断类型</span></span><br><span class="line"><span class="comment">//char c1 = b1;//错误，byte不能自动转化为char类型</span></span><br><span class="line"><span class="comment">// byte b2 = n2;//错误，如果是h变量赋值，会判断类型</span></span><br><span class="line"><span class="comment">// char c1 = b1;//错误，byte不能自动转化为char类型</span></span><br><span class="line"><span class="comment">// byte，short，char 三者都是可以计算的，计算时首先转换为int类型</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">// short s2 = b2 + s1;//错误，b2+s1 =&gt;int</span></span><br><span class="line"><span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span>b2 + s1;</span><br><span class="line"><span class="comment">// byte b4 = b2 + b3;//错误，b2+b3 =&gt;int</span></span><br><span class="line"><span class="comment">//boolean 不参与类型的自动转换</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">pass</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//int num1 = pass;//错误，不参与自动转换</span></span><br><span class="line"><span class="comment">//自动提升原则，表达式结果的类型自动提升为 操作数中最大的类型</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> ch2 ;</span><br><span class="line">ch2 = ch + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;```</span><br><span class="line"></span><br><span class="line">- ***强制类型转换***</span><br><span class="line">- 是自动类型转换的*逆过程*,将高精度数据类型转换为容量小的数据类型，使用时需要用强制类型转换(),但是很有可能会导致精度降低或溢出，需要自行注意  </span><br><span class="line">- 强制符号只针对最近的操作数有效，需要小括号提升优先级</span><br><span class="line">- <span class="type">char</span>类型可以保存<span class="type">int</span>的常量，但是不能保存<span class="type">int</span>的变量值，需要强转</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForceConvert</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1.9</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n1 =&quot;</span> + n1);<span class="comment">//1,精度损失</span></span><br><span class="line"><span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> (<span class="type">byte</span>)n2;</span><br><span class="line">System.out.println(<span class="string">&quot;b1 = &quot;</span> +b1);<span class="comment">//-48，数据溢出</span></span><br><span class="line"><span class="comment">// int x = (int)10*3.5 + 6 * 1.5;</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (<span class="type">int</span>)(<span class="number">10</span>*<span class="number">3.5</span> + <span class="number">6</span> * <span class="number">1.5</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;y = &quot;</span> + y);</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="comment">// char c2 = m;//错误，</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> (<span class="type">char</span>)m;</span><br><span class="line">System.out.println(<span class="string">&quot;c3 = &quot;</span> + c3);<span class="comment">//d</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><em><strong>基本数据类型与String类型互转</strong></em><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToBasic</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">1.1F</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">1.1</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> f1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> d1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> b1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(s1+<span class="string">&quot; &quot;</span>+s2+<span class="string">&quot; &quot;</span>+s3+<span class="string">&quot; &quot;</span>+s4+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> Integer.parseInt(s5);</span><br><span class="line"><span class="type">float</span> <span class="variable">num2</span> <span class="operator">=</span> Float.parseFloat(s5);</span><br><span class="line"><span class="type">double</span> <span class="variable">num3</span> <span class="operator">=</span> Double.parseDouble(s5);</span><br><span class="line"><span class="type">long</span> <span class="variable">num4</span> <span class="operator">=</span> Long.parseLong(s5);</span><br><span class="line"><span class="type">byte</span> <span class="variable">num5</span> <span class="operator">=</span> Byte.parseByte(s5);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(<span class="string">&quot;true&quot;</span>);</span><br><span class="line"><span class="type">short</span> <span class="variable">num6</span> <span class="operator">=</span> Short.parseShort(s5);</span><br><span class="line"></span><br><span class="line">System.out.println(num1);</span><br><span class="line">System.out.println(num2);</span><br><span class="line">System.out.println(num3);</span><br><span class="line">System.out.println(num4);</span><br><span class="line">System.out.println(num5);</span><br><span class="line">System.out.println(num6);</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="comment">//获得字符串的某一个位置的字符</span></span><br><span class="line">System.out.println(s5.charAt(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><em>注意点</em><ul><li>在将String转化为基本数据类型时，要确保String类型能够转化为正确的类型，否则会抛出异常</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>从零开始学java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>lesson</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01.Java概述</title>
    <link href="/2023/11/16/01-Java%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/11/16/01-Java%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>学习课程：<a href="https://www.bilibili.com/video/BV1fh411y7R8/">韩顺平零基础学Java</a><br>目标：有一定基础，故快速过完第一段<br>本节课进度：P1- P34</p></blockquote><ul><li><strong>程序</strong>：计算机执行某些操作或解决某个问题而编写的一系列<em>有序指令的集合</em></li><li>执行java程序基本操作：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac myCode.java <span class="comment">//java compile 编译生成class文件</span></span><br><span class="line">java myCode<span class="comment">//运行class文件</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="java技术体系"><a href="#java技术体系" class="headerlink" title="java技术体系"></a>java技术体系</h2><ul><li>长期版本（LTS）：java8 ,java11</li><li>第一个版本：1995年</li><li>体系平台：<ul><li>Java SE ：标准版—-支持面向桌面级的应用</li><li>Java EE：企业版—-开发企业环境下的应用程序</li><li>Java ME：小型版—支持java程序运行在移动终端（现在基本不用）</li></ul></li></ul><h2 id="Java特点"><a href="#Java特点" class="headerlink" title="Java特点"></a>Java特点</h2><ul><li>面向对象</li><li>健壮的：强类型机制，异常处理，垃圾自动收集</li><li><strong>跨平台：</strong><ul><li>java文件编译结束的class文件可以在所有操作系统(Win,Mac,linux等)上运行</li><li>实现原理：java虚拟机</li></ul></li><li><strong>解释性语言</strong>：JavaScript，PHP，java等（与编译性语言C C++不同）</li></ul><h2 id="Java运行机制和运行流程"><a href="#Java运行机制和运行流程" class="headerlink" title="Java运行机制和运行流程"></a>Java运行机制和运行流程</h2><blockquote><p>看懂这段基本就能了解Java安装的基础架构了</p></blockquote><ul><li><strong>JVM</strong>：Java虚拟机<ul><li>不同系统的Java虚拟机不同，包含在JDK中，是同一个文件可以在不同操作系统运行的关键（不同操作系统的编码方式不同）</li><li>屏蔽了底层运行平台的差别</li></ul></li><li><strong>JDK</strong>:Java Development Kit Java开发工具包（<em>开发人员</em>）<ul><li><em>JDK &#x3D; JRE+Java的开发工具（Java，javac,javap等）</em></li></ul></li><li><strong>JRE</strong>：Java Runtime Environment Java运行环境（<em>使用人员</em>）<ul><li><em>JRE &#x3D;JVM+Java的核心类库</em></li><li>只运行java class的话没必要下载JDK，下载JRE即可，无需下载开发工具</li></ul></li></ul><h2 id="安装Java："><a href="#安装Java：" class="headerlink" title="安装Java："></a>安装Java：</h2><ul><li>博主电脑上已经安装jdk1.8，在此处不作讲解。</li><li><em><strong>配置环境变量的原因：</strong></em><ul><li>以前安装时一直配置，但是没有太明白理由，今天才了解清楚</li><li>当前执行的程序如果在目录内不存在，windows系统会在名为path的环境变量指定的目录中查找，如果仍未找到，就会报错。</li></ul></li></ul><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><blockquote><p>每次接触新语言都是从hello world开始<br>                                            ——第n次写hello world的感受。。。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编辑器：subline</span></span><br><span class="line"><span class="comment">//编码问题：注意需要将编码切换为GBK，否则在dos会因为中文注释编译失败</span></span><br><span class="line"><span class="comment">//(正常就是用utf-8编码，此处仅为与老师课程一致而使用GBK)</span></span><br><span class="line"><span class="comment">//subline配置中文插件教程: https://blog.csdn.net/baron_nd/article/details/108982942</span></span><br><span class="line"><span class="comment">//first java program</span></span><br><span class="line"><span class="comment">//public class helloworld 表示这是 一个类，是public公有类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">helloworld</span>&#123;</span><br><span class="line"><span class="comment">//编写main方法，是程序执行的入口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">//java语法末尾有;语法区分大小写</span></span><br><span class="line">System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hello dog&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java开发细节问题"><a href="#Java开发细节问题" class="headerlink" title="Java开发细节问题"></a>Java开发细节问题</h2><ul><li>一个源文件中最多只能有一个public类，其他类的个数不限<ul><li><em>编译后每个类都会对应生成一个class文件</em></li><li>如果源文件内包含一个public类，<em>该文件的命名必须和公有类的命名相同</em></li><li>也可以把main方法卸载非public类上，然后指定运行非public类，这样入口的方法就是非public的main方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javac helloworld.java</span><br><span class="line">java dog</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：hello dog</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="Java-学习方法（不同阶段）"><a href="#Java-学习方法（不同阶段）" class="headerlink" title="Java 学习方法（不同阶段）"></a>Java 学习方法（不同阶段）</h1><ul><li>看是否符合自己的需求，与传统方法对比</li><li>先学习新技术或知识点的基本原理和基本语法（不考虑过多的细节）</li><li>快速入门（写出一个基本程序，crud）</li><li>开始研究技术的注意事项，使用细节，使用规范，优化方式</li></ul><h2 id="Java转移字符"><a href="#Java转移字符" class="headerlink" title="Java转移字符"></a>Java转移字符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">charChange</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">// \t:间隔一个制表位，实现对齐</span></span><br><span class="line">System.out.println(<span class="string">&quot;上海\t北京\t深圳&quot;</span>);</span><br><span class="line"><span class="comment">// \n：换行</span></span><br><span class="line">System.out.println(<span class="string">&quot;上海\n北京\n深圳&quot;</span>);</span><br><span class="line"><span class="comment">// \\ 转义字符</span></span><br><span class="line">System.out.println(<span class="string">&quot;C:\\User\\Desktop&quot;</span>);</span><br><span class="line"><span class="comment">// \&#x27;  \&quot;转移字符</span></span><br><span class="line">System.out.println(<span class="string">&quot;我说\&quot;hello world\&#x27;&quot;</span>);</span><br><span class="line"><span class="comment">// \r 一个回车(与换行不同)</span></span><br><span class="line"><span class="comment">//最后会输出深圳：回车是把光标放在本行的最前面，然后覆盖之前的内容</span></span><br><span class="line">System.out.println(<span class="string">&quot;上海\r北京\r深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//上海    北京    深圳</span></span><br><span class="line"><span class="comment">//黑龙江  哈尔滨  黄沙港</span></span><br><span class="line"><span class="comment">//上海</span></span><br><span class="line"><span class="comment">//北京</span></span><br><span class="line"><span class="comment">//深圳</span></span><br><span class="line"><span class="comment">//C:\User\Desktop</span></span><br><span class="line"><span class="comment">//我说&quot;hello world&#x27;</span></span><br><span class="line"><span class="comment">//深圳</span></span><br></pre></td></tr></table></figure><h2 id="易犯错误"><a href="#易犯错误" class="headerlink" title="易犯错误"></a>易犯错误</h2><ul><li>找不到文件：路径错误或文件名错误</li><li>主类名和文件名不一致：声明为public的类和文件名要一致</li><li>忘写分号</li><li>语法错误：直接看错误信息<ul><li>非法字符：一般是用了中文字符之类的</li><li>找不到符号：一般是关键字拼写错误</li></ul></li><li>最麻烦的：业务错误，环境错误</li></ul><h2 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h2><ul><li><p>单行注释：&#x2F;&#x2F;</p></li><li><p>多行注释：&#x2F; * * &#x2F;</p></li><li><p><em>文档注释：</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@author</span> 十众</span></span><br><span class="line"><span class="comment">*<span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//文档注释的生成：javadoc -d 文件夹名 -xx -yy xxx.java</span></span><br><span class="line"><span class="comment">//参数解释:-xx -yy 此处为author version 参数数量没有限制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">comment</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注释内容可以被JDK提供的javadoc解析，生成一套以网页文件形式体现的该程序的说明文档</p></li><li><p>常用标签：（等到自己需要使用的时候再记忆）</p></li></ul><table><thead><tr><th>标签</th><th>描述</th><th>标签类型</th></tr></thead><tbody><tr><td>@author</td><td>作者标识</td><td>包、 类、接口</td></tr><tr><td>@deprecated</td><td>标识当前API已经过期，仅为了保证兼容性依然存在，以此告之开发者不应再用这个API</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td></td><td>指明当前文档根目录的路径</td><td></td></tr><tr><td>@exception</td><td>标志一个类抛出的异常</td><td>构造函数、 方法</td></tr><tr><td></td><td>从直接父类继承的注释</td><td></td></tr><tr><td></td><td>链接到某个特定的成员对应的文档中</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td></td><td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td>@param</td><td>方法的入参名及描述信息，如入参有特别要求，可在此注释</td><td>构造函数、方法</td></tr><tr><td>@return</td><td>对函数返回值的注释</td><td>方法</td></tr><tr><td>@see</td><td>引用,查看相关内容，如类、方法、变量等</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td>@serial</td><td>说明一个序列化属性</td><td></td></tr><tr><td>@serialData</td><td>说明通过writeObject( ) 和 writeExternal( )方法写的数据</td><td></td></tr><tr><td>@serialField</td><td>说明一个ObjectStreamField组件</td><td>@</td></tr><tr><td>@since</td><td>描述文本,API在什么程序的什么版本后开发支持</td><td>包、类、接口、值域、构造函数、 方法</td></tr><tr><td>@throws</td><td>构造函数或方法所会抛出的异常</td><td>构造函数、 方法</td></tr><tr><td></td><td>显示常量的值，该常量必须是static属性</td><td>静态值域</td></tr><tr><td>@version</td><td>版本号</td><td>包、 类、接口</td></tr></tbody></table><h2 id="Java代码规范"><a href="#Java代码规范" class="headerlink" title="Java代码规范"></a><em><strong>Java代码规范</strong></em></h2><ul><li><em>对类和方法的注释</em>：以javadoc的方式来写（文档注释）</li><li><em>非javadoc的注释</em>：维护者使用，着重讲解为何这么写，如何修改，需要注意什么细节等</li><li><em>缩进</em>：tab  shift+tab 整体缩进</li><li><em>运算符的书写</em>：数字以及运算符两边加空格 e.g. int n &#x3D; 1 + 3 * 34;</li><li><em>源文件字符集</em>：使用UTF-8</li><li><em>每行长度</em>：不超过80字符</li><li><em>代码风格</em>：次行风格和行尾风格</li></ul><h2 id="DOS命令"><a href="#DOS命令" class="headerlink" title="DOS命令"></a>DOS命令</h2><ul><li><em>路径</em><ul><li>相对路径：从当前目录开始定位<ul><li>.\  :同目录</li><li>..\ ：上一级目录，可以多次，e.g. :  ..\..\xxx\hello.java</li></ul></li><li>绝对路径：从顶级目录C、D等开始定位</li></ul></li><li><em>常用指令</em> ：<ul><li>dir:查看当前目录内容</li><li>cd:切换目录(切换盘符时：从D盘到C盘 cd &#x2F;D c:)</li><li>cd .. :切换到上一级目录</li><li>cd \ :切换到根目录</li><li>tree：查看目录的结构(目录树)</li><li>cls：清屏</li><li>exit:退出DOS</li><li>md:创建目录</li><li>rd:删除目录</li><li>cpoy:拷贝文件</li><li>del：删除文件</li><li>echo:输入内容到文件</li><li>type:查看指定文件的内容</li><li>move:剪切</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>从零开始学java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>lesson</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
